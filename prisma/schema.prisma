// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            String    @default("USER") // USER, ADMIN, DRIVER, KITCHEN_STAFF
  phone           String?
  address         String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  orders           Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core business models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  basePrice   Float
  categoryId  String
  isActive    Boolean @default(true)
  isVegetarian Boolean @default(false)
  isVegan      Boolean @default(false)
  prepTime     Int     @default(15) // in minutes
  calories     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category     Category @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]

  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  status            String      @default("PENDING") // PENDING, CONFIRMED, PREPARING, READY, OUT_FOR_DELIVERY, DELIVERED, CANCELLED
  paymentStatus     String      @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentMethod     String?     // "card", "cash", "online"
  subtotal          Float
  taxAmount         Float
  deliveryFee       Float       @default(0)
  totalAmount       Float
  specialInstructions String?
  estimatedDeliveryTime DateTime?
  actualDeliveryTime DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  notes       String?

  order    Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product  Product     @relation(fields: [productId], references: [id])

  @@map("order_items")
}